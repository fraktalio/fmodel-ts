"use strict";(self.webpackChunkfmodel_ts_doc=self.webpackChunkfmodel_ts_doc||[]).push([[599],{7198:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>d,toc:()=>c});var i=t(4848),s=t(8453);const o={sidebar_position:1},r="Discovering the Domain",d={id:"domain/discovering-the-domain",title:"Discovering the Domain",description:"There are numerous techniques to discover a domain.",source:"@site/docs/domain/discovering-the-domain.md",sourceDirName:"domain",slug:"/domain/discovering-the-domain",permalink:"/fmodel-ts/docs/domain/discovering-the-domain",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Modeling The Domain",permalink:"/fmodel-ts/docs/category/modeling-the-domain"},next:{title:"Structuring the data",permalink:"/fmodel-ts/docs/domain/structuring-the-data"}},a={},c=[];function l(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",header:"header",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"discovering-the-domain",children:"Discovering the Domain"})}),"\n",(0,i.jsx)(n.p,{children:"There are numerous techniques to discover a domain.\nEvent Storming is a particularly interesting one.\nIt is a workshop format for quickly exploring business domains, engaging both Domain Experts and Software Developers."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://eventmodeling.org/posts/what-is-event-modeling/",children:"Event Modeling"})," adopts Event Storming sticky notes. The final piece was the UI/UX aspects to complete what more resembles a movie story board (white board - or digital white board).\nWhile Event Storming focuses in discovering the problem space, ",(0,i.jsx)(n.strong,{children:"Event Modeling creates a blueprint for a solution"}),"."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"It is a method of describing systems using an example of how information has changed within them over time."}),"\n",(0,i.jsx)(n.li,{children:"It is a scenario-based and UX-driven approach to defining requirements."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["On a higher level of abstraction, any information system is responsible for handling the intent (",(0,i.jsx)(n.code,{children:"Command"}),") and, based\non the current ",(0,i.jsx)(n.code,{children:"State,"})," produce new facts (",(0,i.jsx)(n.code,{children:"Events"}),"). The system\u2019s ",(0,i.jsx)(n.strong,{children:"new"})," ",(0,i.jsx)(n.code,{children:"State"})," is then evolved out of these ",(0,i.jsx)(n.code,{children:"Events."})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"event modeling",src:t(917).A+"",width:"5391",height:"3776"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"User submits the form on the page by clicking on the button"}),"\n",(0,i.jsxs)(n.li,{children:["The intent to change the system is explicitly captured/modeled as a Command/",(0,i.jsx)(n.code,{children:"C"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Command is handled by the decider component, which State/",(0,i.jsx)(n.code,{children:"S"})," (yellow) is represented in the swim-lane at the bottom."]}),"\n",(0,i.jsxs)(n.li,{children:["Based on the current State and the Command it received, the Decider will make new decisions/Events/",(0,i.jsx)(n.code,{children:"E"})]}),"\n",(0,i.jsx)(n.li,{children:"New Events will update/evolve the State of the Decider (yellow), and the View (green)"}),"\n",(0,i.jsx)(n.li,{children:"The View state is constructed per need to serve specific pages with data. Every page can have its View."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["'FModel' is offering implementation of this blueprint in a very general way.\nThe implementation is parametrized with C/",(0,i.jsx)(n.code,{children:"Command"}),", E/",(0,i.jsx)(n.code,{children:"Event"}),", and S/",(0,i.jsx)(n.code,{children:"State"})," parameters."]}),"\n",(0,i.jsxs)(n.p,{children:["The responsibility of the business is to specialize in their case by specifying concrete Commands, Events, and State.\nFor example, ",(0,i.jsx)(n.code,{children:"Commands"}),"=CreateOrder, MarkOrderAsPrepared; ",(0,i.jsx)(n.code,{children:"Events"}),"=OrderCreated, OrderPrepared, ",(0,i.jsx)(n.code,{children:"State"}),"=Order(with list\nof Items)."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"restaurant model",src:t(7172).A+"",width:"2787",height:"1434"})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Customers use the web application to place food orders at local restaurants. Application coordinates a\nrestaurant/kitchen order preparation."})})}),"\n",(0,i.jsxs)(n.p,{children:["Let's learn how to ",(0,i.jsx)(n.a,{href:"/fmodel-ts/docs/domain/structuring-the-data",children:"structure the data/information"})," and how to\neffectively ",(0,i.jsx)(n.a,{href:"/fmodel-ts/docs/domain/modeling-the-behaviour",children:"model the behaviour"})," in TypeScript, by example!"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},917:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/event-modeling-f50f091a2cb9416fdd017660651d5de8.png"},7172:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/restaurant-model-bddc3c24c98956e7e56820d50a92ee77.jpg"},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>d});var i=t(6540);const s={},o=i.createContext(s);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);